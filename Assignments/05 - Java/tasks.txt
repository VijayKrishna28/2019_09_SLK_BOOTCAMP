

Assignment 1

    Write a brief history of Java Programming Language
    Explain Primitive types in Java
    What are the different programming constructs in java? Explain with examples.







Assignment 2

Implement the body for the following function:

static boolean isValidDate(int year, int month, int day) { 
	// do stuff here
	return false; 
}

The function should check if the parameter values constitute a valid calendar date or not. Accordingly return true or false.

For example,

    year=2018, month=13, day=1 is an invalid date as the possible values for month is 1 to 12.
    year=2018, month=2, day=29 is an invalid date as the maximum days in February is 28 in the year 2018
    year=2016, month=2, day=29 is a valid date.

Write a Java program to call the above function multiple times with different values.







Assignment 3


Implement the body for the following function:

static boolean isPrimeNumber(int num) { 
	// do stuff here
	return false; 
}

The function should check and return true only if the number passed as argument is a prime number.

Write a Java program to call the above function multiple times with different values.











Assignment 4

Write a function called "sortThreeNumbers", which takes 3 distinct integers and prints them in ascending order.

public static void sortThreeNumbers(int a, int b, int c) { 
	// do stuff here
}

For example,

    sortThreeNumbers(2, 10, 1); // prints 1, 2, 10
    sortThreeNumbers(20, 10, 1); // prints 1, 10, 20
    sortThreeNumbers(2, 10, 100); // prints 2, 10, 100 and so on.

Write a Java program to call the above function multiple times with different values.










Assignment 5

Write a function called "sumOfPrimes", that takes two integers as input and returns the sum of all the prime numbers between the same.

public static int sumOfPrimes(int from, int to) { 
	// do stuff here
	return 0; 
}

Write a Java program to call the above function multiple times with different values.









Assignment 6

In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, characterized by the fact that every number after the first two numbers is the sum of the two preceding ones:

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

Write a function called "fibonacci", that takes index as paramter and returns the fibonacci number at that index.

public static int fibonacci(int index) { 
	// do stuff here
	return 0; 
}







Assignment 7

Write a Java program to print the following pattern:

*
**
***
****
*****

The number of rows should be based on the value of a variable "num", and the number of stars in a row is based on the row number itself.









Assignment 8

In trignometry, the Sine of an angle is represented by the series below:

Write a Java function that accepts angle in degrees and returns the sine of the given angle.

Call the function in main, multiple times by supplying multiple values and verify the same.

PS:

    Divide the function into small reusable functions, if possible.
    Do not use builtin Java classes like Math
    Inside the sine function, use a loop that iterates for n times (for example 10)




''



Assignment 9

Implement the Java function listed below:

public static void printCalendar(int month, int year) {
	/// do stuff here
}

The function should accept month and year and print the calendar for the same. If inputs are invalid, appropriate error message/s should be printed.

Sample output for the inputs (8, 2018):

Su Mo Tu We Th Fr Sa  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30 31  

PS:

    Do not use any builtin Java classes like Date or Calendar
    Divide the function into small reusable functions, if possible.










Assignment 10

Write a function called "sumOfEvensAndOdds", that takes an array of integers as input and returns another array of integers of length 2. The first element in the returned array is the sum of all even numbers in the input array, and the second element in the returned array is the sum of all odd numbers in the input array.

public static int[] sumOfEvensAndOdds(int []nums) { 
	// do stuff here
	return null;
}

For example,

int [] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 
int [] result = sumOfEvensAndOdds(nums);
// result should be equal to {30, 25}

Hint:

An arrays is created as shown below:

int []arr = new int[2];
arr[0] = 12;
arr[1] = 100;

or

int []arr = {12, 100}

Call the function in main, multiple times by supplying multiple values and verify the same.










Assignment 11

Write a function called "reverseByWords", that takes a sentence (string) as an input, and returns another string. The return value must be a sentence in which the words in the original sentence appear in reverse order.

public static String reverseByWords(String sentence) { 
	// do stuff here
	return null; 
}

For example,

String out = reverseByWords("my name is vinod and i live in bangalore");
// the variable "out" should be equal to "bangalore in live i and vinod is name my".

Call the function in main, multiple times by supplying multiple values and verify the same.










Assignment 12

Write a function called "inWords" that takes a number between 1 and 99,99,99,999 and returns a String representing the input number in words.

public static String inWords(int num) { 
	// do stuff here
	return null; 
}

For example,

inWords(12345);
// should return "twelve thousand three hundred forty five"
inWords(10203040);
// should return "one crore two lakh three thousand forty"
inWords(101);
// should return "one hundred one"

Call the function in main, multiple times by supplying multiple values and verify the same.








Assignment 13

Implement the following function:

public static String generatePassword(int length) {
	// do stuff here
}

The function should return a random string, each time when called, of required length (function argument). The password consists of lower case and upper case alphabets, digits from 0 to 9, special characters ~!@#$%^&*

Hint:

Math.random() returns a number between 0.0 and 1.0










Assignment 14

Implement the following function:

public static void printAllCombinations(String word) {
	// do stuff here
}

The function should take a word (no spaces and special characters, only alpha numeric), and print all possible combinations of letters in the given word.

For example, for the input "win", the output should be:

[iwn, nwi, inw, wni, win, niw]

And for the input "vinod", the output should be:

[vidon, vonid, doniv, dovin, inodv, ivdon, vdnio, nivod, ovdin, ivodn, viodn, noidv, 
ondiv, dvoni, vidno, indvo, ivdno, nvodi, oindv, oivdn, idvon, dnovi, idnov, nvdoi, 
onidv, doinv, vndoi, voind, noivd, vdion, iovnd, ovidn, nvoid, idvno, ionvd, dvnoi, 
vnido, oidvn, vdoni, ndivo, vindo, novdi, idnvo, ndoiv, oidnv, dionv, vndio, iovdn, 
iondv, viond, ndvoi, odniv, odvin, diovn, nodiv, nviod, onvdi, vodni, invod, ovndi, 
vinod, dinov, vodin, divon, donvi, nvdio, ivnod, idonv, ovdni, dvion, nidov, ovnid, 
ondvi, niodv, idovn, ndvio, onvid, dvino, divno, vnoid, dnoiv, odivn, ndiov, vondi, 
nvido, dnivo, dinvo, dnvoi, odinv, dvoin, iodnv, nidvo, doivn, invdo, ovind, vdoin, 
iodvn, vnodi, oinvd, ndovi, vdino, ivndo, onivd, nivdo, oivnd, inovd, ivond, dnvio, 
odnvi, voidn, novid, dniov, dovni, vniod, nodvi, odvni, vdnoi, dvnio, indov, niovd]

Call the function in main, multiple times by supplying multiple values and verify the same.









Assignment 15

Create classes Circle and Cylinder as shown in the UML diagram below:

In the main() function of a Program class, create an array of Circle references with the initialization shown below:

Circle[] circles = {
	new Cylinder(12.34),
	new Cylinder(12.34, 10.0),
	new Cylinder(12.34, 10.0, "blue")
};

Print the area of the circular region of each cylinder along with the volume of the same.









Assignment 16

Create the classes Person, Student, and Staff as shown in the UML diagram below:

In the main() function of a Program class, create an array of Person references with the initialization shown below:

Person[] people = {
	new Student("Shyam", "Bangalore, Karnataka", "Java fundamentals", 2010, 4500.0),
	new Staff("Anand", "Bangalore, Karnataka", "Delhi Public school", 35000.0), 
	new Staff("Umesh", "Bangalore, Karnataka", "National Public school", 42000.0), 
	new Student("Suresh", "Hassan, Karnataka", "Java fundamentals", 2012, 4750.0),
	new Student("Kiran", "Vasco, Goa", "Reactjs", 2017, 12500.0)
};

Print the details of all Person objects (using the toString()).









Assignment 17

Create the classes Shape, Circle, Rectangle, and Square as shown in the UML diagram below:

The toString function of the above classes should return text as given below:
Classname 	Sample return value from toString()
Shape 	A Shape with color of xxx and filled/Not filled
Circle 	A Circle with radius=xxx, which is a subclass of yyy (where yyy is the output of the toString() method from the superclass)
Rectangle 	A Rectangle with width=xxx and length=zzz, which is a subclass of yyy (where yyy is the output of the toString() method from the superclass)
Square 	A Square with side=xxx, which is a subclass of yyy (where yyy is the output of the toString() method from the superclass)

In the main() method of a Program class, create an array of 10 Shape references containing a mixture of Circle, Rectangle and Square objects of different dimensions. Using a loop, print the perimeter and area for all of them.








Assignment 18

Write a Java application to accept integers in a loop. After each number is accepted, the user should be asked if he/she wishes to continue. If the user inputs "NO", then the loop should be stopped and following output should be displayed:

Number of inputs = X
Number of integer inputs = Y
Number of non-integer inputs = Z
Sum of all integer inputs = XX
The integer inputs = N1, N2, N3, ...
The non-integer inputs = ASD, SDF, DFG, ...
X, Y, Z, etc should be actual values, based on the inputs.

HINT:

Use java.util.Scanner for accepting data from the user.

Scanner s = new Scanner(System.in);
String input = s.nextLine();
int n = s.nextInt();
double d = s.nextDouble();
// ... s









Assignment 19

Write a function called "calendar" that takes a String representing year/month in YYYY-MM format and returns a two-dimensional array representing the calendar for the input month and year.

For example, if the input is "2018-03”, then the output is:

{
	{0, 0, 0, 0, 1, 2, 3},
	{4, 5, 6, 7, 8, 9, 10},
	{11, 12, 13, 14, 15, 16, 17}, 
	{18, 19, 20, 21, 22, 23, 24}, 
	{25, 26, 27, 28, 29, 30, 31}
}

For input "2018-02", the output should be:

{
	{0, 0, 0, 0, 1, 2, 3},
	{4, 5, 6, 7, 8, 9 10},
	{11, 12, 13, 14, 15, 16, 17}, 
	{18, 19, 20, 21, 22, 23, 24}, 
	{25, 26, 27, 28, 0, 0, 0}
}

The method should throw a custom exception InvalidDateException, in case if the input does not represent a valid year/month combination, and InvalidInputException in case if the input is not in the expected YYYY-MM format.











Assignment 20

Download the file game.jar.

Open a command prompt in the location where you downloaded the jar file and run the following command:

java -jar game.jar

This will run a Java program from the JAR file, and will ask you to enter a dimension (of a matrix). Please enter a number between 3 and 10.

The game will show you a shuffled matrix of numbers, with an empty box. Our goal is to arrange the numbers in ascending order by moving numbers around the box.

You are required to understand the way the application works, and recreate the same as a Java application.

Once the numbers are arranged properly, a contratulations message should appear, and the application must terminate.










Assignment 21

Interface Movable and its implementations MovablePoint and MovableCircle

Write two concrete classes - MovablePoint and MovableCircle - that implement the Movable interface.

For the MovablePoint class, declare the instance variable x, y, xSpeed and ySpeed with package access as shown with '~' in the class diagram (i.e., classes in the same package can access these variables directly). For the MovableCircle class, use a MovablePoint to represent its center (which contains four variable x, y, xSpeed and ySpeed). In other words, the MovableCircle composes a MovablePoint, and its radius.

public class MovablePoint implements Movable {
   // instance variables
   int x, y, xSpeed, ySpeed;     // package access
   
   // Constructor
   public MovablePoint(int x, int y, int xSpeed, int ySpeed) {
      this.x = x;
      ......
   }
   ......
   
   // Implement abstract methods declared in the interface Movable
   @Override
   public void moveUp() {
      y -= ySpeed;   // y-axis pointing down for 2D graphics
   }
   ......
}

public class MovableCircle implements Movable { // saved as "MovableCircle.java"
   // instance variables
   private MovablePoint center;   // can use center.x, center.y directly
                                  //  because they are package accessible
   private int radius;
   
   // Constructor
   public MovableCircle(int x, int y, int xSpeed, int ySpeed, int radius) {
      // Call the MovablePoint's constructor to allocate the center instance.
      center = new MovablePoint(x, y, xSpeed, ySpeed);
      ......
   }
   ......
   
   // Implement abstract methods declared in the interface Movable
   @Override
   public void moveUp() {
      center.y -= center.ySpeed;
   }
   ......
}

Write a test program and try out these statements:

Movable m1 = new MovablePoint(5, 6, 10, 15);     // upcast
System.out.println(m1);
m1.moveLeft();
System.out.println(m1);
   
Movable m2 = new MovableCircle(1, 2, 3, 4, 20);  // upcast
System.out.println(m2);
m2.moveRight();
System.out.println(m2);

Write a new class called MovableRectangle, which composes two MovablePoint objects (representing the top-left and bottom-right corners) and implementing the Movable Interface. Make sure that the two points has the same speed.

In the test program, add the following code to test the new implementation:

 
Movable m3 = new MovableRectangle(1, 2, 3, 4, 25, 35);  // upcast
System.out.println(m3);
m3.moveUp();
System.out.println(m3);











Assignment 22

Create the following classes in the respective packages.

    Class com.slk.assignment22.utils.KeyboardUtil
    Class com.slk.assignment22.utils.DateUtil
    Enum com.slk.assignment22.entity.Gender
    Class com.slk.assignment22.entity.Contact
    Class com.slk.assignment22.dao.DaoException
    Interface com.slk.assignment22.dao.ContactsDao
    Class com.slk.assignment22.dao.DaoFactory
    Class com.slk.assignment22.dao.impl.ContactsDaoHashMapImpl

The code for the above classes/interfaces are shared below.
Note: DO NOT CHANGE THE CODE FOR THESE CLASSES/INTERFACES (except ContactsDaoHashMapImpl)

Class com.slk.assignment22.utils.KeyboardUtil

package com.slk.assignment22.utils;

import java.util.Date;
import java.util.Scanner;

@SuppressWarnings("resource")
public final class KeyboardUtil {

	private KeyboardUtil() {
	}

	public static String getString(String message) {
		System.out.print(message);
		Scanner sc = new Scanner(System.in);
		return sc.nextLine();
	}

	public static int getInt(String message) {
		System.out.print(message);
		Scanner sc = new Scanner(System.in);
		return sc.nextInt();
	}

	public static double getDouble(String message) {
		System.out.print(message);
		Scanner sc = new Scanner(System.in);
		return sc.nextDouble();
	}

	public static Date getDate(String message) {
		return DateUtil.toDate(getString(message));
	}

}

Class com.slk.assignment22.utils.DateUtil

package com.slk.assignment22.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class DateUtil {

	public static String PATTERN = "yyyy-MM-dd";

	private DateUtil() {
	}

	public static String toString(Date input) {
		if(input==null) {
			return "null";
		}
		
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);
			return sdf.format(input);
		} catch (Exception e) {
			return "";
		}
	}

	public static Date toDate(String input) {
		SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);
		sdf.setLenient(false);
		try {
			return sdf.parse(input);
		} catch (ParseException e) {
			return null;
		}
	}
}

Enum: com.slk.assignment22.entity.Gender

package com.slk.assignment22.entity;

public enum Gender {
	MALE, FEMALE
}

Class: com.slk.assignment22.entity.Contact

public class Contact {

	private static int idCounter;

	private int id;
	private String firstname;
	private String lastname;
	private Gender gender = Gender.MALE;
	private String email;
	private String phone;
	private String address;
	private String city = "Bangalore";
	private String state = "Karnataka";
	private Integer pincode;
	private String country = "India";
	private Date birthDate;

	public Contact() {
		this.id = ++idCounter;
	}

	public Contact(String firstname, String lastname, String email, String phone, String city) {
		this.id = ++idCounter;
		this.firstname = firstname;
		this.lastname = lastname;
		this.email = email;
		this.phone = phone;
		this.city = city;
	}

	// add the getters and setters

}

Class com.slk.assignment22.dao.DaoException

package com.slk.assignment22.dao;

public class DaoException extends Exception {

	private static final long serialVersionUID = 1L;

	public DaoException() {
		super();
	}

	public DaoException(String message) {
		super(message);
	}

	public DaoException(Throwable cause) {
		super(cause);
	}

}


